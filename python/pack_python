#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2024 Ferenc Nandor Janky <ferenj@effective-range.com>
# SPDX-FileCopyrightText: 2024 Attila Gombos <attila.gombos@effective-range.com>
# SPDX-License-Identifier: MIT

import re
import subprocess
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter, Namespace, BooleanOptionalAction
from configparser import ConfigParser
from os.path import exists, dirname, abspath
from typing import Optional

from common.common import check_workspace, get_absolute_path

DEFAULT_PACKAGING = 'wheel'


def main() -> None:
    arguments = _get_arguments()

    workspace_dir = abspath(arguments.workspace_dir)

    check_workspace(workspace_dir)

    config_file = get_absolute_path(arguments.config_file, workspace_dir)

    configuration = None

    if arguments.scripts:
        packaging = arguments.scripts.split()
    else:
        configuration, packaging = parse_config(arguments, config_file)

    scripts_dir = f'{abspath(dirname(__file__))}/scripts'

    for script in packaging:
        script_file = f'{scripts_dir}/{script}'
        if exists(script_file):

            command = [script_file, workspace_dir]

            if configuration:
                arg_string = configuration.get(script)
                if arg_string:
                    command.extend(split_arguments(arg_string))

            if arguments.python_bin:
                command.extend(['-p', arguments.python_bin])

            if arguments.output_dir:
                command.extend(['-o', arguments.output_dir])

            result = subprocess.run(command, text=True, stdout=subprocess.PIPE)

            if not result.returncode:
                if result.stdout:
                    print(result.stdout.rstrip('\n'))


def parse_config(arguments: Namespace, config_file: str) -> tuple[Optional[dict[str, str]], list[str]]:
    configuration = None
    packaging = [DEFAULT_PACKAGING]

    if exists(config_file):
        parser = ConfigParser()
        parser.read(config_file)

        if parser.has_section('pack-python'):
            configuration = dict(parser['pack-python'])

            packaging_options = configuration.get('packaging', '').split()

            if arguments.all:
                packaging = packaging_options
            else:
                default = configuration.get('default', DEFAULT_PACKAGING)
                packaging = [default]

    return configuration, packaging


def _get_arguments() -> Namespace:
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('-s', '--scripts', help='space separated packaging scripts to run')
    parser.add_argument('-a', '--all', help='run all configured packaging scripts', action=BooleanOptionalAction,
                        default=False)
    parser.add_argument('-c', '--config-file', help='config file path relative to workspace directory',
                        default='setup.cfg')
    parser.add_argument('-p', '--python-bin', help='python executable to use', default='python3')
    parser.add_argument('-o', '--output-dir', help='package output directory')
    parser.add_argument('workspace_dir', help='workspace directory where setup.py is located')
    return parser.parse_args()


def split_arguments(arg_string: str) -> list[str]:
    # Split on spaces, but allow spaces inside double quotes
    pattern = r'\"(.*?)\"|(\S+)'
    matches = re.findall(pattern, arg_string)
    return [match[0] if match[0] else match[1] for match in matches]


if __name__ == '__main__':
    main()
